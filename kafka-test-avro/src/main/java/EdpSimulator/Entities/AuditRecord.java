/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package EdpSimulator.Entities;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class AuditRecord extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 7418895526583829479L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"AuditRecord\",\"namespace\":\"EdpSimulator.Entities\",\"fields\":[{\"name\":\"beforeImage\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"HMV_DDA\",\"namespace\":\"value.SOURCEDB.DEP000PA.DEPPA\",\"fields\":[{\"name\":\"HDDA_KEY_COMP\",\"type\":{\"type\":\"int\",\"logicalType\":\"DECIMAL\",\"dbColumnName\":\"HDDA_KEY_COMP\",\"precision\":5,\"scale\":0},\"default\":0},{\"name\":\"HDDA_KEY_CONTA\",\"type\":{\"type\":\"long\",\"logicalType\":\"DECIMAL\",\"dbColumnName\":\"HDDA_KEY_CONTA\",\"precision\":15,\"scale\":0},\"default\":0},{\"name\":\"HDDA_KEY_DATA_LANCAMENTO\",\"type\":{\"type\":\"string\",\"logicalType\":\"DATE\",\"dbColumnName\":\"HDDA_KEY_DATA_LANCAMENTO\",\"length\":10},\"default\":\"\"},{\"name\":\"HDDA_KEY_ORIGEM\",\"type\":{\"type\":\"string\",\"logicalType\":\"CHARACTER\",\"dbColumnName\":\"HDDA_KEY_ORIGEM\",\"length\":1},\"default\":\"\"},{\"name\":\"HDDA_KEY_DATA_HORA\",\"type\":{\"type\":\"string\",\"logicalType\":\"TIMESTAMP\",\"dbColumnName\":\"HDDA_KEY_DATA_HORA\",\"length\":26},\"default\":\"\"},{\"name\":\"HDDA_HST_REVERSAL\",\"type\":{\"type\":\"string\",\"logicalType\":\"CHARACTER\",\"dbColumnName\":\"HDDA_HST_REVERSAL\",\"length\":1},\"default\":\"\"},{\"name\":\"HDDA_HST_STMT_REVERS\",\"type\":{\"type\":\"string\",\"logicalType\":\"CHARACTER\",\"dbColumnName\":\"HDDA_HST_STMT_REVERS\",\"length\":1},\"default\":\"\"},{\"name\":\"HDDA_HST_CURR_DG\",\"type\":{\"type\":\"int\",\"logicalType\":\"DECIMAL\",\"dbColumnName\":\"HDDA_HST_CURR_DG\",\"precision\":5,\"scale\":0},\"default\":0},{\"name\":\"HDDA_HST_SUBPRD\",\"type\":{\"type\":\"string\",\"logicalType\":\"CHARACTER\",\"dbColumnName\":\"HDDA_HST_SUBPRD\",\"length\":2},\"default\":\"\"},{\"name\":\"HDDA_HST_TRAN_SIGN\",\"type\":{\"type\":\"int\",\"logicalType\":\"DECIMAL\",\"dbColumnName\":\"HDDA_HST_TRAN_SIGN\",\"precision\":1,\"scale\":0},\"default\":0},{\"name\":\"HDDA_HST_TRAN_TYPE\",\"type\":{\"type\":\"string\",\"logicalType\":\"CHARACTER\",\"dbColumnName\":\"HDDA_HST_TRAN_TYPE\",\"length\":1},\"default\":\"\"},{\"name\":\"HDDA_HST_GLI_SOURCE\",\"type\":{\"type\":\"string\",\"logicalType\":\"CHARACTER\",\"dbColumnName\":\"HDDA_HST_GLI_SOURCE\",\"length\":1},\"default\":\"\"},{\"name\":\"HDDA_HST_FUNC_ID\",\"type\":{\"type\":\"int\",\"logicalType\":\"DECIMAL\",\"dbColumnName\":\"HDDA_HST_FUNC_ID\",\"precision\":5,\"scale\":0},\"default\":0},{\"name\":\"HDDA_HST_SOURCE_TYPE\",\"type\":{\"type\":\"int\",\"logicalType\":\"DECIMAL\",\"dbColumnName\":\"HDDA_HST_SOURCE_TYPE\",\"precision\":5,\"scale\":0},\"default\":0},{\"name\":\"HDDA_HST_ENVIRONMENT\",\"type\":{\"type\":\"int\",\"logicalType\":\"DECIMAL\",\"dbColumnName\":\"HDDA_HST_ENVIRONMENT\",\"precision\":5,\"scale\":0},\"default\":0},{\"name\":\"HDDA_HST_EFF_DATE\",\"type\":{\"type\":\"string\",\"logicalType\":\"DATE\",\"dbColumnName\":\"HDDA_HST_EFF_DATE\",\"length\":10},\"default\":\"\"},{\"name\":\"HDDA_HST_TRAN_COD_REVERS\",\"type\":{\"type\":\"int\",\"logicalType\":\"DECIMAL\",\"dbColumnName\":\"HDDA_HST_TRAN_COD_REVERS\",\"precision\":5,\"scale\":0},\"default\":0},{\"name\":\"HDDA_HST_DEP_WD\",\"type\":{\"type\":\"string\",\"logicalType\":\"CHARACTER\",\"dbColumnName\":\"HDDA_HST_DEP_WD\",\"length\":1},\"default\":\"\"},{\"name\":\"HDDA_HST_TAMT\",\"type\":{\"type\":\"string\",\"logicalType\":\"DECIMAL\",\"dbColumnName\":\"HDDA_HST_TAMT\",\"precision\":13,\"scale\":2},\"default\":\"0\"},{\"name\":\"HDDA_HST_BRANCH\",\"type\":{\"type\":\"int\",\"logicalType\":\"DECIMAL\",\"dbColumnName\":\"HDDA_HST_BRANCH\",\"precision\":5,\"scale\":0},\"default\":0},{\"name\":\"HDDA_HST_TRANS_SEQ\",\"type\":{\"type\":\"int\",\"logicalType\":\"DECIMAL\",\"dbColumnName\":\"HDDA_HST_TRANS_SEQ\",\"precision\":7,\"scale\":0},\"default\":0},{\"name\":\"HDDA_HST_PAID_INTO_OD\",\"type\":{\"type\":\"string\",\"logicalType\":\"CHARACTER\",\"dbColumnName\":\"HDDA_HST_PAID_INTO_OD\",\"length\":1},\"default\":\"\"},{\"name\":\"HDDA_HST_LEDG_BAL_AFP\",\"type\":{\"type\":\"string\",\"logicalType\":\"DECIMAL\",\"dbColumnName\":\"HDDA_HST_LEDG_BAL_AFP\",\"precision\":13,\"scale\":2},\"default\":\"0\"},{\"name\":\"HDDA_HST_COLL_BAL_AFP\",\"type\":{\"type\":\"string\",\"logicalType\":\"DECIMAL\",\"dbColumnName\":\"HDDA_HST_COLL_BAL_AFP\",\"precision\":13,\"scale\":2},\"default\":\"0\"},{\"name\":\"HDDA_HST_TRANS_NO\",\"type\":{\"type\":\"long\",\"logicalType\":\"DECIMAL\",\"dbColumnName\":\"HDDA_HST_TRANS_NO\",\"precision\":11,\"scale\":0},\"default\":0},{\"name\":\"HDDA_HST_TCK_SERIAL_NO\",\"type\":{\"type\":\"long\",\"logicalType\":\"DECIMAL\",\"dbColumnName\":\"HDDA_HST_TCK_SERIAL_NO\",\"precision\":11,\"scale\":0},\"default\":0},{\"name\":\"HDDA_HST_TRACE_ID\",\"type\":{\"type\":\"string\",\"logicalType\":\"CHARACTER\",\"dbColumnName\":\"HDDA_HST_TRACE_ID\",\"length\":20},\"default\":\"\"},{\"name\":\"HDDA_HST_CASH_AMT\",\"type\":{\"type\":\"string\",\"logicalType\":\"DECIMAL\",\"dbColumnName\":\"HDDA_HST_CASH_AMT\",\"precision\":13,\"scale\":2},\"default\":\"0\"},{\"name\":\"HDDA_HST_INTERN_GEN\",\"type\":{\"type\":\"string\",\"logicalType\":\"CHARACTER\",\"dbColumnName\":\"HDDA_HST_INTERN_GEN\",\"length\":1},\"default\":\"\"},{\"name\":\"HDDA_HST_HORA\",\"type\":{\"type\":\"int\",\"logicalType\":\"DECIMAL\",\"dbColumnName\":\"HDDA_HST_HORA\",\"precision\":7,\"scale\":0},\"default\":0},{\"name\":\"HDDA_HST_DATA_SISTEMA\",\"type\":{\"type\":\"string\",\"logicalType\":\"CHARACTER\",\"dbColumnName\":\"HDDA_HST_DATA_SISTEMA\",\"length\":10},\"default\":\"\"},{\"name\":\"HDDA_HST_SOURCE\",\"type\":{\"type\":\"string\",\"logicalType\":\"CHARACTER\",\"dbColumnName\":\"HDDA_HST_SOURCE\",\"length\":8},\"default\":\"\"},{\"name\":\"HDDA_HST_OPER\",\"type\":{\"type\":\"string\",\"logicalType\":\"CHARACTER\",\"dbColumnName\":\"HDDA_HST_OPER\",\"length\":20},\"default\":\"\"},{\"name\":\"HDDA_HST_DESCR\",\"type\":{\"type\":\"string\",\"logicalType\":\"CHARACTER\",\"dbColumnName\":\"HDDA_HST_DESCR\",\"length\":47},\"default\":\"\"},{\"name\":\"HDDA_HST_ACT_NO_TO\",\"type\":{\"type\":\"long\",\"logicalType\":\"DECIMAL\",\"dbColumnName\":\"HDDA_HST_ACT_NO_TO\",\"precision\":15,\"scale\":0},\"default\":0},{\"name\":\"HDDA_HST_ACT_NO_FROM\",\"type\":{\"type\":\"long\",\"logicalType\":\"DECIMAL\",\"dbColumnName\":\"HDDA_HST_ACT_NO_FROM\",\"precision\":15,\"scale\":0},\"default\":0},{\"name\":\"HDDA_HST_VAMT_FLOAT_0\",\"type\":{\"type\":\"string\",\"logicalType\":\"DECIMAL\",\"dbColumnName\":\"HDDA_HST_VAMT_FLOAT_0\",\"precision\":13,\"scale\":2},\"default\":\"0\"},{\"name\":\"HDDA_HST_VDAY_FLOAT_0\",\"type\":{\"type\":\"long\",\"logicalType\":\"DECIMAL\",\"dbColumnName\":\"HDDA_HST_VDAY_FLOAT_0\",\"precision\":13,\"scale\":0},\"default\":0},{\"name\":\"HDDA_HST_VAMT_FLOAT_1\",\"type\":{\"type\":\"string\",\"logicalType\":\"DECIMAL\",\"dbColumnName\":\"HDDA_HST_VAMT_FLOAT_1\",\"precision\":13,\"scale\":2},\"default\":\"0\"},{\"name\":\"HDDA_HST_VDAY_FLOAT_1\",\"type\":{\"type\":\"long\",\"logicalType\":\"DECIMAL\",\"dbColumnName\":\"HDDA_HST_VDAY_FLOAT_1\",\"precision\":13,\"scale\":0},\"default\":0},{\"name\":\"HDDA_HST_VAMT_FLOAT_2\",\"type\":{\"type\":\"string\",\"logicalType\":\"DECIMAL\",\"dbColumnName\":\"HDDA_HST_VAMT_FLOAT_2\",\"precision\":13,\"scale\":2},\"default\":\"0\"},{\"name\":\"HDDA_HST_VDAY_FLOAT_2\",\"type\":{\"type\":\"long\",\"logicalType\":\"DECIMAL\",\"dbColumnName\":\"HDDA_HST_VDAY_FLOAT_2\",\"precision\":13,\"scale\":0},\"default\":0},{\"name\":\"HDDA_HST_VAMT_FLOAT_3\",\"type\":{\"type\":\"string\",\"logicalType\":\"DECIMAL\",\"dbColumnName\":\"HDDA_HST_VAMT_FLOAT_3\",\"precision\":13,\"scale\":2},\"default\":\"0\"},{\"name\":\"HDDA_HST_VDAY_FLOAT_3\",\"type\":{\"type\":\"long\",\"logicalType\":\"DECIMAL\",\"dbColumnName\":\"HDDA_HST_VDAY_FLOAT_3\",\"precision\":13,\"scale\":0},\"default\":0},{\"name\":\"HDDA_HST_TRACE_ID_CONT\",\"type\":{\"type\":\"string\",\"logicalType\":\"CHARACTER\",\"dbColumnName\":\"HDDA_HST_TRACE_ID_CONT\",\"length\":10},\"default\":\"\"},{\"name\":\"HDDA_HST_INPUT_MOEDA\",\"type\":{\"type\":\"string\",\"logicalType\":\"CHARACTER\",\"dbColumnName\":\"HDDA_HST_INPUT_MOEDA\",\"length\":3},\"default\":\"\"},{\"name\":\"HDDA_HST_ORIG_MOEDA\",\"type\":{\"type\":\"string\",\"logicalType\":\"CHARACTER\",\"dbColumnName\":\"HDDA_HST_ORIG_MOEDA\",\"length\":3},\"default\":\"\"},{\"name\":\"HDDA_HST_ORIG_CURR_TAMT\",\"type\":{\"type\":\"string\",\"logicalType\":\"DECIMAL\",\"dbColumnName\":\"HDDA_HST_ORIG_CURR_TAMT\",\"precision\":13,\"scale\":2},\"default\":\"0\"},{\"name\":\"HDDA_HST_ORIG_BRANCH\",\"type\":{\"type\":\"int\",\"logicalType\":\"DECIMAL\",\"dbColumnName\":\"HDDA_HST_ORIG_BRANCH\",\"precision\":5,\"scale\":0},\"default\":0},{\"name\":\"HDDA_HST_STMT_REVERS_CODE\",\"type\":{\"type\":\"string\",\"logicalType\":\"CHARACTER\",\"dbColumnName\":\"HDDA_HST_STMT_REVERS_CODE\",\"length\":1},\"default\":\"\"},{\"name\":\"HDDA_HST_LIM_TOL_USADO\",\"type\":{\"type\":\"string\",\"logicalType\":\"DECIMAL\",\"dbColumnName\":\"HDDA_HST_LIM_TOL_USADO\",\"precision\":11,\"scale\":2},\"default\":\"0\"},{\"name\":\"HDDA_HST_CANAL\",\"type\":{\"type\":\"string\",\"logicalType\":\"CHARACTER\",\"dbColumnName\":\"HDDA_HST_CANAL\",\"length\":4},\"default\":\"\"},{\"name\":\"HDDA_HST_ID_PRIORIT\",\"type\":{\"type\":\"int\",\"logicalType\":\"DECIMAL\",\"dbColumnName\":\"HDDA_HST_ID_PRIORIT\",\"precision\":5,\"scale\":0},\"default\":0},{\"name\":\"HDDA_HST_CANAL2\",\"type\":{\"type\":\"string\",\"logicalType\":\"CHARACTER\",\"dbColumnName\":\"HDDA_HST_CANAL2\",\"length\":4},\"default\":\"\"},{\"name\":\"HDDA_HST_","TRATADO\",\"type\":{\"type\":\"string\",\"logicalType\":\"CHARACTER\",\"dbColumnName\":\"HDDA_HST_TRATADO\",\"length\":1},\"default\":\"\"},{\"name\":\"HDDA_HST_AVAILABLE_BALANCE\",\"type\":{\"type\":\"string\",\"logicalType\":\"DECIMAL\",\"dbColumnName\":\"HDDA_HST_AVAILABLE_BALANCE\",\"precision\":13,\"scale\":2},\"default\":\"0\"},{\"name\":\"HDDA_HST_ADJ_BAL\",\"type\":{\"type\":\"string\",\"logicalType\":\"DECIMAL\",\"dbColumnName\":\"HDDA_HST_ADJ_BAL\",\"precision\":13,\"scale\":2},\"default\":\"0\"},{\"name\":\"HDDA_HST_COLL_BAL\",\"type\":{\"type\":\"string\",\"logicalType\":\"DECIMAL\",\"dbColumnName\":\"HDDA_HST_COLL_BAL\",\"precision\":13,\"scale\":2},\"default\":\"0\"},{\"name\":\"HDDA_HST_SALDO_AUTORIZADO\",\"type\":{\"type\":\"string\",\"logicalType\":\"DECIMAL\",\"dbColumnName\":\"HDDA_HST_SALDO_AUTORIZADO\",\"precision\":13,\"scale\":2},\"default\":\"0\"},{\"name\":\"HDDA_HST_SLD_DISP_BD\",\"type\":{\"type\":\"string\",\"logicalType\":\"DECIMAL\",\"dbColumnName\":\"HDDA_HST_SLD_DISP_BD\",\"precision\":13,\"scale\":2},\"default\":\"0\"},{\"name\":\"HDDA_HST_LINE_AMT\",\"type\":{\"type\":\"string\",\"logicalType\":\"DECIMAL\",\"dbColumnName\":\"HDDA_HST_LINE_AMT\",\"precision\":13,\"scale\":2},\"default\":\"0\"},{\"name\":\"HDDA_HST_MEMO_DR\",\"type\":{\"type\":\"string\",\"logicalType\":\"DECIMAL\",\"dbColumnName\":\"HDDA_HST_MEMO_DR\",\"precision\":13,\"scale\":2},\"default\":\"0\"},{\"name\":\"HDDA_HST_MEMO_CR\",\"type\":{\"type\":\"string\",\"logicalType\":\"DECIMAL\",\"dbColumnName\":\"HDDA_HST_MEMO_CR\",\"precision\":13,\"scale\":2},\"default\":\"0\"},{\"name\":\"HDDA_HST_CATIVOS_DEBITO\",\"type\":{\"type\":\"string\",\"logicalType\":\"DECIMAL\",\"dbColumnName\":\"HDDA_HST_CATIVOS_DEBITO\",\"precision\":13,\"scale\":2},\"default\":\"0\"},{\"name\":\"HDDA_HST_CATIVOS_CREDITO\",\"type\":{\"type\":\"string\",\"logicalType\":\"DECIMAL\",\"dbColumnName\":\"HDDA_HST_CATIVOS_CREDITO\",\"precision\":13,\"scale\":2},\"default\":\"0\"},{\"name\":\"HDDA_HST_SLD_DISP_LCA\",\"type\":{\"type\":\"string\",\"logicalType\":\"DECIMAL\",\"dbColumnName\":\"HDDA_HST_SLD_DISP_LCA\",\"precision\":13,\"scale\":2},\"default\":\"0\"},{\"name\":\"HDDA_HST_INVESTMENT_BAL\",\"type\":{\"type\":\"string\",\"logicalType\":\"DECIMAL\",\"dbColumnName\":\"HDDA_HST_INVESTMENT_BAL\",\"precision\":13,\"scale\":2},\"default\":\"0\"},{\"name\":\"HDDA_HST_AVAIL_LOC\",\"type\":{\"type\":\"string\",\"logicalType\":\"DECIMAL\",\"dbColumnName\":\"HDDA_HST_AVAIL_LOC\",\"precision\":13,\"scale\":2},\"default\":\"0\"},{\"name\":\"HDDA_HST_SSV_LIM_AUTORIZ\",\"type\":{\"type\":\"string\",\"logicalType\":\"DECIMAL\",\"dbColumnName\":\"HDDA_HST_SSV_LIM_AUTORIZ\",\"precision\":13,\"scale\":2},\"default\":\"0\"},{\"name\":\"HDDA_HST_SLD_CONTAB\",\"type\":{\"type\":\"string\",\"logicalType\":\"DECIMAL\",\"dbColumnName\":\"HDDA_HST_SLD_CONTAB\",\"precision\":13,\"scale\":2},\"default\":\"0\"},{\"name\":\"HDDA_HST_DESCR_CONT\",\"type\":{\"type\":\"string\",\"logicalType\":\"CHARACTER\",\"dbColumnName\":\"HDDA_HST_DESCR_CONT\",\"length\":53},\"default\":\"\"},{\"name\":\"HDDA_HST_CATEG\",\"type\":{\"type\":\"int\",\"logicalType\":\"DECIMAL\",\"dbColumnName\":\"HDDA_HST_CATEG\",\"precision\":3,\"scale\":0},\"default\":0},{\"name\":\"HDDA_SEQ_ID\",\"type\":{\"type\":\"long\",\"logicalType\":\"BIGINT\",\"dbColumnName\":\"HDDA_SEQ_ID\"},\"default\":0}]}]},{\"name\":\"afterImage\",\"type\":[\"null\",\"value.SOURCEDB.DEP000PA.DEPPA.HMV_DDA\"]},{\"name\":\"A_ENTTYP\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"A_CCID\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"A_TIMSTAMP\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"eventId\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"eventKcopTimestamp\",\"type\":[\"null\",\"long\"],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<AuditRecord> ENCODER =
      new BinaryMessageEncoder<AuditRecord>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<AuditRecord> DECODER =
      new BinaryMessageDecoder<AuditRecord>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<AuditRecord> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<AuditRecord> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<AuditRecord> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<AuditRecord>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this AuditRecord to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a AuditRecord from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a AuditRecord instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static AuditRecord fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private value.SOURCEDB.DEP000PA.DEPPA.HMV_DDA beforeImage;
   private value.SOURCEDB.DEP000PA.DEPPA.HMV_DDA afterImage;
   private java.lang.CharSequence A_ENTTYP;
   private java.lang.CharSequence A_CCID;
   private java.lang.CharSequence A_TIMSTAMP;
   private java.lang.CharSequence eventId;
   private java.lang.Long eventKcopTimestamp;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public AuditRecord() {}

  /**
   * All-args constructor.
   * @param beforeImage The new value for beforeImage
   * @param afterImage The new value for afterImage
   * @param A_ENTTYP The new value for A_ENTTYP
   * @param A_CCID The new value for A_CCID
   * @param A_TIMSTAMP The new value for A_TIMSTAMP
   * @param eventId The new value for eventId
   * @param eventKcopTimestamp The new value for eventKcopTimestamp
   */
  public AuditRecord(value.SOURCEDB.DEP000PA.DEPPA.HMV_DDA beforeImage, value.SOURCEDB.DEP000PA.DEPPA.HMV_DDA afterImage, java.lang.CharSequence A_ENTTYP, java.lang.CharSequence A_CCID, java.lang.CharSequence A_TIMSTAMP, java.lang.CharSequence eventId, java.lang.Long eventKcopTimestamp) {
    this.beforeImage = beforeImage;
    this.afterImage = afterImage;
    this.A_ENTTYP = A_ENTTYP;
    this.A_CCID = A_CCID;
    this.A_TIMSTAMP = A_TIMSTAMP;
    this.eventId = eventId;
    this.eventKcopTimestamp = eventKcopTimestamp;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return beforeImage;
    case 1: return afterImage;
    case 2: return A_ENTTYP;
    case 3: return A_CCID;
    case 4: return A_TIMSTAMP;
    case 5: return eventId;
    case 6: return eventKcopTimestamp;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: beforeImage = (value.SOURCEDB.DEP000PA.DEPPA.HMV_DDA)value$; break;
    case 1: afterImage = (value.SOURCEDB.DEP000PA.DEPPA.HMV_DDA)value$; break;
    case 2: A_ENTTYP = (java.lang.CharSequence)value$; break;
    case 3: A_CCID = (java.lang.CharSequence)value$; break;
    case 4: A_TIMSTAMP = (java.lang.CharSequence)value$; break;
    case 5: eventId = (java.lang.CharSequence)value$; break;
    case 6: eventKcopTimestamp = (java.lang.Long)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'beforeImage' field.
   * @return The value of the 'beforeImage' field.
   */
  public value.SOURCEDB.DEP000PA.DEPPA.HMV_DDA getBeforeImage() {
    return beforeImage;
  }


  /**
   * Sets the value of the 'beforeImage' field.
   * @param value the value to set.
   */
  public void setBeforeImage(value.SOURCEDB.DEP000PA.DEPPA.HMV_DDA value) {
    this.beforeImage = value;
  }

  /**
   * Gets the value of the 'afterImage' field.
   * @return The value of the 'afterImage' field.
   */
  public value.SOURCEDB.DEP000PA.DEPPA.HMV_DDA getAfterImage() {
    return afterImage;
  }


  /**
   * Sets the value of the 'afterImage' field.
   * @param value the value to set.
   */
  public void setAfterImage(value.SOURCEDB.DEP000PA.DEPPA.HMV_DDA value) {
    this.afterImage = value;
  }

  /**
   * Gets the value of the 'A_ENTTYP' field.
   * @return The value of the 'A_ENTTYP' field.
   */
  public java.lang.CharSequence getAENTTYP() {
    return A_ENTTYP;
  }


  /**
   * Sets the value of the 'A_ENTTYP' field.
   * @param value the value to set.
   */
  public void setAENTTYP(java.lang.CharSequence value) {
    this.A_ENTTYP = value;
  }

  /**
   * Gets the value of the 'A_CCID' field.
   * @return The value of the 'A_CCID' field.
   */
  public java.lang.CharSequence getACCID() {
    return A_CCID;
  }


  /**
   * Sets the value of the 'A_CCID' field.
   * @param value the value to set.
   */
  public void setACCID(java.lang.CharSequence value) {
    this.A_CCID = value;
  }

  /**
   * Gets the value of the 'A_TIMSTAMP' field.
   * @return The value of the 'A_TIMSTAMP' field.
   */
  public java.lang.CharSequence getATIMSTAMP() {
    return A_TIMSTAMP;
  }


  /**
   * Sets the value of the 'A_TIMSTAMP' field.
   * @param value the value to set.
   */
  public void setATIMSTAMP(java.lang.CharSequence value) {
    this.A_TIMSTAMP = value;
  }

  /**
   * Gets the value of the 'eventId' field.
   * @return The value of the 'eventId' field.
   */
  public java.lang.CharSequence getEventId() {
    return eventId;
  }


  /**
   * Sets the value of the 'eventId' field.
   * @param value the value to set.
   */
  public void setEventId(java.lang.CharSequence value) {
    this.eventId = value;
  }

  /**
   * Gets the value of the 'eventKcopTimestamp' field.
   * @return The value of the 'eventKcopTimestamp' field.
   */
  public java.lang.Long getEventKcopTimestamp() {
    return eventKcopTimestamp;
  }


  /**
   * Sets the value of the 'eventKcopTimestamp' field.
   * @param value the value to set.
   */
  public void setEventKcopTimestamp(java.lang.Long value) {
    this.eventKcopTimestamp = value;
  }

  /**
   * Creates a new AuditRecord RecordBuilder.
   * @return A new AuditRecord RecordBuilder
   */
  public static EdpSimulator.Entities.AuditRecord.Builder newBuilder() {
    return new EdpSimulator.Entities.AuditRecord.Builder();
  }

  /**
   * Creates a new AuditRecord RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new AuditRecord RecordBuilder
   */
  public static EdpSimulator.Entities.AuditRecord.Builder newBuilder(EdpSimulator.Entities.AuditRecord.Builder other) {
    if (other == null) {
      return new EdpSimulator.Entities.AuditRecord.Builder();
    } else {
      return new EdpSimulator.Entities.AuditRecord.Builder(other);
    }
  }

  /**
   * Creates a new AuditRecord RecordBuilder by copying an existing AuditRecord instance.
   * @param other The existing instance to copy.
   * @return A new AuditRecord RecordBuilder
   */
  public static EdpSimulator.Entities.AuditRecord.Builder newBuilder(EdpSimulator.Entities.AuditRecord other) {
    if (other == null) {
      return new EdpSimulator.Entities.AuditRecord.Builder();
    } else {
      return new EdpSimulator.Entities.AuditRecord.Builder(other);
    }
  }

  /**
   * RecordBuilder for AuditRecord instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<AuditRecord>
    implements org.apache.avro.data.RecordBuilder<AuditRecord> {

    private value.SOURCEDB.DEP000PA.DEPPA.HMV_DDA beforeImage;
    private value.SOURCEDB.DEP000PA.DEPPA.HMV_DDA.Builder beforeImageBuilder;
    private value.SOURCEDB.DEP000PA.DEPPA.HMV_DDA afterImage;
    private value.SOURCEDB.DEP000PA.DEPPA.HMV_DDA.Builder afterImageBuilder;
    private java.lang.CharSequence A_ENTTYP;
    private java.lang.CharSequence A_CCID;
    private java.lang.CharSequence A_TIMSTAMP;
    private java.lang.CharSequence eventId;
    private java.lang.Long eventKcopTimestamp;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(EdpSimulator.Entities.AuditRecord.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.beforeImage)) {
        this.beforeImage = data().deepCopy(fields()[0].schema(), other.beforeImage);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (other.hasBeforeImageBuilder()) {
        this.beforeImageBuilder = value.SOURCEDB.DEP000PA.DEPPA.HMV_DDA.newBuilder(other.getBeforeImageBuilder());
      }
      if (isValidValue(fields()[1], other.afterImage)) {
        this.afterImage = data().deepCopy(fields()[1].schema(), other.afterImage);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (other.hasAfterImageBuilder()) {
        this.afterImageBuilder = value.SOURCEDB.DEP000PA.DEPPA.HMV_DDA.newBuilder(other.getAfterImageBuilder());
      }
      if (isValidValue(fields()[2], other.A_ENTTYP)) {
        this.A_ENTTYP = data().deepCopy(fields()[2].schema(), other.A_ENTTYP);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.A_CCID)) {
        this.A_CCID = data().deepCopy(fields()[3].schema(), other.A_CCID);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.A_TIMSTAMP)) {
        this.A_TIMSTAMP = data().deepCopy(fields()[4].schema(), other.A_TIMSTAMP);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.eventId)) {
        this.eventId = data().deepCopy(fields()[5].schema(), other.eventId);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.eventKcopTimestamp)) {
        this.eventKcopTimestamp = data().deepCopy(fields()[6].schema(), other.eventKcopTimestamp);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
    }

    /**
     * Creates a Builder by copying an existing AuditRecord instance
     * @param other The existing instance to copy.
     */
    private Builder(EdpSimulator.Entities.AuditRecord other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.beforeImage)) {
        this.beforeImage = data().deepCopy(fields()[0].schema(), other.beforeImage);
        fieldSetFlags()[0] = true;
      }
      this.beforeImageBuilder = null;
      if (isValidValue(fields()[1], other.afterImage)) {
        this.afterImage = data().deepCopy(fields()[1].schema(), other.afterImage);
        fieldSetFlags()[1] = true;
      }
      this.afterImageBuilder = null;
      if (isValidValue(fields()[2], other.A_ENTTYP)) {
        this.A_ENTTYP = data().deepCopy(fields()[2].schema(), other.A_ENTTYP);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.A_CCID)) {
        this.A_CCID = data().deepCopy(fields()[3].schema(), other.A_CCID);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.A_TIMSTAMP)) {
        this.A_TIMSTAMP = data().deepCopy(fields()[4].schema(), other.A_TIMSTAMP);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.eventId)) {
        this.eventId = data().deepCopy(fields()[5].schema(), other.eventId);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.eventKcopTimestamp)) {
        this.eventKcopTimestamp = data().deepCopy(fields()[6].schema(), other.eventKcopTimestamp);
        fieldSetFlags()[6] = true;
      }
    }

    /**
      * Gets the value of the 'beforeImage' field.
      * @return The value.
      */
    public value.SOURCEDB.DEP000PA.DEPPA.HMV_DDA getBeforeImage() {
      return beforeImage;
    }


    /**
      * Sets the value of the 'beforeImage' field.
      * @param value The value of 'beforeImage'.
      * @return This builder.
      */
    public EdpSimulator.Entities.AuditRecord.Builder setBeforeImage(value.SOURCEDB.DEP000PA.DEPPA.HMV_DDA value) {
      validate(fields()[0], value);
      this.beforeImageBuilder = null;
      this.beforeImage = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'beforeImage' field has been set.
      * @return True if the 'beforeImage' field has been set, false otherwise.
      */
    public boolean hasBeforeImage() {
      return fieldSetFlags()[0];
    }

    /**
     * Gets the Builder instance for the 'beforeImage' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public value.SOURCEDB.DEP000PA.DEPPA.HMV_DDA.Builder getBeforeImageBuilder() {
      if (beforeImageBuilder == null) {
        if (hasBeforeImage()) {
          setBeforeImageBuilder(value.SOURCEDB.DEP000PA.DEPPA.HMV_DDA.newBuilder(beforeImage));
        } else {
          setBeforeImageBuilder(value.SOURCEDB.DEP000PA.DEPPA.HMV_DDA.newBuilder());
        }
      }
      return beforeImageBuilder;
    }

    /**
     * Sets the Builder instance for the 'beforeImage' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public EdpSimulator.Entities.AuditRecord.Builder setBeforeImageBuilder(value.SOURCEDB.DEP000PA.DEPPA.HMV_DDA.Builder value) {
      clearBeforeImage();
      beforeImageBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'beforeImage' field has an active Builder instance
     * @return True if the 'beforeImage' field has an active Builder instance
     */
    public boolean hasBeforeImageBuilder() {
      return beforeImageBuilder != null;
    }

    /**
      * Clears the value of the 'beforeImage' field.
      * @return This builder.
      */
    public EdpSimulator.Entities.AuditRecord.Builder clearBeforeImage() {
      beforeImage = null;
      beforeImageBuilder = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'afterImage' field.
      * @return The value.
      */
    public value.SOURCEDB.DEP000PA.DEPPA.HMV_DDA getAfterImage() {
      return afterImage;
    }


    /**
      * Sets the value of the 'afterImage' field.
      * @param value The value of 'afterImage'.
      * @return This builder.
      */
    public EdpSimulator.Entities.AuditRecord.Builder setAfterImage(value.SOURCEDB.DEP000PA.DEPPA.HMV_DDA value) {
      validate(fields()[1], value);
      this.afterImageBuilder = null;
      this.afterImage = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'afterImage' field has been set.
      * @return True if the 'afterImage' field has been set, false otherwise.
      */
    public boolean hasAfterImage() {
      return fieldSetFlags()[1];
    }

    /**
     * Gets the Builder instance for the 'afterImage' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public value.SOURCEDB.DEP000PA.DEPPA.HMV_DDA.Builder getAfterImageBuilder() {
      if (afterImageBuilder == null) {
        if (hasAfterImage()) {
          setAfterImageBuilder(value.SOURCEDB.DEP000PA.DEPPA.HMV_DDA.newBuilder(afterImage));
        } else {
          setAfterImageBuilder(value.SOURCEDB.DEP000PA.DEPPA.HMV_DDA.newBuilder());
        }
      }
      return afterImageBuilder;
    }

    /**
     * Sets the Builder instance for the 'afterImage' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public EdpSimulator.Entities.AuditRecord.Builder setAfterImageBuilder(value.SOURCEDB.DEP000PA.DEPPA.HMV_DDA.Builder value) {
      clearAfterImage();
      afterImageBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'afterImage' field has an active Builder instance
     * @return True if the 'afterImage' field has an active Builder instance
     */
    public boolean hasAfterImageBuilder() {
      return afterImageBuilder != null;
    }

    /**
      * Clears the value of the 'afterImage' field.
      * @return This builder.
      */
    public EdpSimulator.Entities.AuditRecord.Builder clearAfterImage() {
      afterImage = null;
      afterImageBuilder = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'A_ENTTYP' field.
      * @return The value.
      */
    public java.lang.CharSequence getAENTTYP() {
      return A_ENTTYP;
    }


    /**
      * Sets the value of the 'A_ENTTYP' field.
      * @param value The value of 'A_ENTTYP'.
      * @return This builder.
      */
    public EdpSimulator.Entities.AuditRecord.Builder setAENTTYP(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.A_ENTTYP = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'A_ENTTYP' field has been set.
      * @return True if the 'A_ENTTYP' field has been set, false otherwise.
      */
    public boolean hasAENTTYP() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'A_ENTTYP' field.
      * @return This builder.
      */
    public EdpSimulator.Entities.AuditRecord.Builder clearAENTTYP() {
      A_ENTTYP = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'A_CCID' field.
      * @return The value.
      */
    public java.lang.CharSequence getACCID() {
      return A_CCID;
    }


    /**
      * Sets the value of the 'A_CCID' field.
      * @param value The value of 'A_CCID'.
      * @return This builder.
      */
    public EdpSimulator.Entities.AuditRecord.Builder setACCID(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.A_CCID = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'A_CCID' field has been set.
      * @return True if the 'A_CCID' field has been set, false otherwise.
      */
    public boolean hasACCID() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'A_CCID' field.
      * @return This builder.
      */
    public EdpSimulator.Entities.AuditRecord.Builder clearACCID() {
      A_CCID = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'A_TIMSTAMP' field.
      * @return The value.
      */
    public java.lang.CharSequence getATIMSTAMP() {
      return A_TIMSTAMP;
    }


    /**
      * Sets the value of the 'A_TIMSTAMP' field.
      * @param value The value of 'A_TIMSTAMP'.
      * @return This builder.
      */
    public EdpSimulator.Entities.AuditRecord.Builder setATIMSTAMP(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.A_TIMSTAMP = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'A_TIMSTAMP' field has been set.
      * @return True if the 'A_TIMSTAMP' field has been set, false otherwise.
      */
    public boolean hasATIMSTAMP() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'A_TIMSTAMP' field.
      * @return This builder.
      */
    public EdpSimulator.Entities.AuditRecord.Builder clearATIMSTAMP() {
      A_TIMSTAMP = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'eventId' field.
      * @return The value.
      */
    public java.lang.CharSequence getEventId() {
      return eventId;
    }


    /**
      * Sets the value of the 'eventId' field.
      * @param value The value of 'eventId'.
      * @return This builder.
      */
    public EdpSimulator.Entities.AuditRecord.Builder setEventId(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.eventId = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'eventId' field has been set.
      * @return True if the 'eventId' field has been set, false otherwise.
      */
    public boolean hasEventId() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'eventId' field.
      * @return This builder.
      */
    public EdpSimulator.Entities.AuditRecord.Builder clearEventId() {
      eventId = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'eventKcopTimestamp' field.
      * @return The value.
      */
    public java.lang.Long getEventKcopTimestamp() {
      return eventKcopTimestamp;
    }


    /**
      * Sets the value of the 'eventKcopTimestamp' field.
      * @param value The value of 'eventKcopTimestamp'.
      * @return This builder.
      */
    public EdpSimulator.Entities.AuditRecord.Builder setEventKcopTimestamp(java.lang.Long value) {
      validate(fields()[6], value);
      this.eventKcopTimestamp = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'eventKcopTimestamp' field has been set.
      * @return True if the 'eventKcopTimestamp' field has been set, false otherwise.
      */
    public boolean hasEventKcopTimestamp() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'eventKcopTimestamp' field.
      * @return This builder.
      */
    public EdpSimulator.Entities.AuditRecord.Builder clearEventKcopTimestamp() {
      eventKcopTimestamp = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public AuditRecord build() {
      try {
        AuditRecord record = new AuditRecord();
        if (beforeImageBuilder != null) {
          try {
            record.beforeImage = this.beforeImageBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("beforeImage"));
            throw e;
          }
        } else {
          record.beforeImage = fieldSetFlags()[0] ? this.beforeImage : (value.SOURCEDB.DEP000PA.DEPPA.HMV_DDA) defaultValue(fields()[0]);
        }
        if (afterImageBuilder != null) {
          try {
            record.afterImage = this.afterImageBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("afterImage"));
            throw e;
          }
        } else {
          record.afterImage = fieldSetFlags()[1] ? this.afterImage : (value.SOURCEDB.DEP000PA.DEPPA.HMV_DDA) defaultValue(fields()[1]);
        }
        record.A_ENTTYP = fieldSetFlags()[2] ? this.A_ENTTYP : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.A_CCID = fieldSetFlags()[3] ? this.A_CCID : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.A_TIMSTAMP = fieldSetFlags()[4] ? this.A_TIMSTAMP : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.eventId = fieldSetFlags()[5] ? this.eventId : (java.lang.CharSequence) defaultValue(fields()[5]);
        record.eventKcopTimestamp = fieldSetFlags()[6] ? this.eventKcopTimestamp : (java.lang.Long) defaultValue(fields()[6]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<AuditRecord>
    WRITER$ = (org.apache.avro.io.DatumWriter<AuditRecord>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<AuditRecord>
    READER$ = (org.apache.avro.io.DatumReader<AuditRecord>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    if (this.beforeImage == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      this.beforeImage.customEncode(out);
    }

    if (this.afterImage == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      this.afterImage.customEncode(out);
    }

    if (this.A_ENTTYP == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.A_ENTTYP);
    }

    if (this.A_CCID == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.A_CCID);
    }

    if (this.A_TIMSTAMP == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.A_TIMSTAMP);
    }

    if (this.eventId == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.eventId);
    }

    if (this.eventKcopTimestamp == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeLong(this.eventKcopTimestamp);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      if (in.readIndex() != 1) {
        in.readNull();
        this.beforeImage = null;
      } else {
        if (this.beforeImage == null) {
          this.beforeImage = new value.SOURCEDB.DEP000PA.DEPPA.HMV_DDA();
        }
        this.beforeImage.customDecode(in);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.afterImage = null;
      } else {
        if (this.afterImage == null) {
          this.afterImage = new value.SOURCEDB.DEP000PA.DEPPA.HMV_DDA();
        }
        this.afterImage.customDecode(in);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.A_ENTTYP = null;
      } else {
        this.A_ENTTYP = in.readString(this.A_ENTTYP instanceof Utf8 ? (Utf8)this.A_ENTTYP : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.A_CCID = null;
      } else {
        this.A_CCID = in.readString(this.A_CCID instanceof Utf8 ? (Utf8)this.A_CCID : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.A_TIMSTAMP = null;
      } else {
        this.A_TIMSTAMP = in.readString(this.A_TIMSTAMP instanceof Utf8 ? (Utf8)this.A_TIMSTAMP : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.eventId = null;
      } else {
        this.eventId = in.readString(this.eventId instanceof Utf8 ? (Utf8)this.eventId : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.eventKcopTimestamp = null;
      } else {
        this.eventKcopTimestamp = in.readLong();
      }

    } else {
      for (int i = 0; i < 7; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          if (in.readIndex() != 1) {
            in.readNull();
            this.beforeImage = null;
          } else {
            if (this.beforeImage == null) {
              this.beforeImage = new value.SOURCEDB.DEP000PA.DEPPA.HMV_DDA();
            }
            this.beforeImage.customDecode(in);
          }
          break;

        case 1:
          if (in.readIndex() != 1) {
            in.readNull();
            this.afterImage = null;
          } else {
            if (this.afterImage == null) {
              this.afterImage = new value.SOURCEDB.DEP000PA.DEPPA.HMV_DDA();
            }
            this.afterImage.customDecode(in);
          }
          break;

        case 2:
          if (in.readIndex() != 1) {
            in.readNull();
            this.A_ENTTYP = null;
          } else {
            this.A_ENTTYP = in.readString(this.A_ENTTYP instanceof Utf8 ? (Utf8)this.A_ENTTYP : null);
          }
          break;

        case 3:
          if (in.readIndex() != 1) {
            in.readNull();
            this.A_CCID = null;
          } else {
            this.A_CCID = in.readString(this.A_CCID instanceof Utf8 ? (Utf8)this.A_CCID : null);
          }
          break;

        case 4:
          if (in.readIndex() != 1) {
            in.readNull();
            this.A_TIMSTAMP = null;
          } else {
            this.A_TIMSTAMP = in.readString(this.A_TIMSTAMP instanceof Utf8 ? (Utf8)this.A_TIMSTAMP : null);
          }
          break;

        case 5:
          if (in.readIndex() != 1) {
            in.readNull();
            this.eventId = null;
          } else {
            this.eventId = in.readString(this.eventId instanceof Utf8 ? (Utf8)this.eventId : null);
          }
          break;

        case 6:
          if (in.readIndex() != 1) {
            in.readNull();
            this.eventKcopTimestamp = null;
          } else {
            this.eventKcopTimestamp = in.readLong();
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










