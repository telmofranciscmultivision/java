/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package EdpSimulator.Entities;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class Cards extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 2498195068724552192L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Cards\",\"namespace\":\"EdpSimulator.Entities\",\"fields\":[{\"name\":\"afterImage\",\"type\":{\"type\":\"record\",\"name\":\"afterImage\",\"fields\":[{\"name\":\"TXN_DT\",\"type\":\"string\"},{\"name\":\"TXN_TM\",\"type\":\"int\"},{\"name\":\"TXN_AMT\",\"type\":\"string\"},{\"name\":\"TXN_SINAL\",\"type\":\"string\"},{\"name\":\"ORIG_PLAS\",\"type\":\"string\"},{\"name\":\"ACCT_COID\",\"type\":\"int\"},{\"name\":\"ACCT_PROD\",\"type\":\"string\"},{\"name\":\"ACCT_NBR\",\"type\":\"string\"},{\"name\":\"FILE_ORIG\",\"type\":\"string\"},{\"name\":\"PSTG_DT\",\"type\":\"int\"},{\"name\":\"PSTG_SEQ\",\"type\":\"int\"},{\"name\":\"TIPO_CRT\",\"type\":\"string\"},{\"name\":\"TXN_FMT_IND\",\"type\":\"string\"},{\"name\":\"TXN_SRCE\",\"type\":\"string\"},{\"name\":\"TXN_CATG\",\"type\":\"string\"},{\"name\":\"TXN_3RD_LVL\",\"type\":\"string\"},{\"name\":\"TXN_4TH_LVL\",\"type\":\"string\"},{\"name\":\"TXN_5TH_LVL\",\"type\":\"string\"},{\"name\":\"PRT_ON_STMT\",\"type\":\"string\"},{\"name\":\"TXN_CD\",\"type\":\"int\"},{\"name\":\"TXN_DESC\",\"type\":\"string\"},{\"name\":\"TXN_CNTRY_CD\",\"type\":\"string\"},{\"name\":\"TXN_FGN_CUR_CD\",\"type\":\"string\"},{\"name\":\"TXN_FGN_AMT\",\"type\":\"string\"},{\"name\":\"TXN_FGN_TC\",\"type\":\"string\"},{\"name\":\"TXN_OPER\",\"type\":\"string\"},{\"name\":\"TXN_MCC\",\"type\":\"string\"},{\"name\":\"TXN_TERM_ID\",\"type\":\"string\"},{\"name\":\"TIPO_OPER\",\"type\":\"string\"},{\"name\":\"TIPO_TERM\",\"type\":\"string\"},{\"name\":\"TIPO_AUTH_CLI\",\"type\":\"string\"},{\"name\":\"TIPO_AUTH_CRT\",\"type\":\"string\"},{\"name\":\"MRCH_DESC\",\"type\":\"string\"},{\"name\":\"NAT_OPER\",\"type\":\"int\"},{\"name\":\"TOKEN_LVL\",\"type\":\"string\"},{\"name\":\"WALTIP\",\"type\":\"string\"},{\"name\":\"APLIC_TXN\",\"type\":\"string\"},{\"name\":\"AVAIL_CR_LN\",\"type\":\"string\"},{\"name\":\"EMB_NM_LN_1\",\"type\":\"string\"},{\"name\":\"PLAS_TENANT\",\"type\":\"string\"},{\"name\":\"NUM_CIS\",\"type\":\"int\"},{\"name\":\"ACCT_FIID\",\"type\":\"string\"},{\"name\":\"ACCT_TYP_CD\",\"type\":\"string\"},{\"name\":\"CTL_ACCT_IND\",\"type\":\"string\"},{\"name\":\"ACCT_CUR_CD\",\"type\":\"string\"},{\"name\":\"OFF\",\"type\":\"string\"},{\"name\":\"CTL_ACCT_COID\",\"type\":\"int\"},{\"name\":\"CTL_ACCT_PROD\",\"type\":\"string\"},{\"name\":\"CTL_ACCT_NBR\",\"type\":\"string\"},{\"name\":\"TIPO_MIG\",\"type\":\"string\"},{\"name\":\"RA_IBAN\",\"type\":\"string\"},{\"name\":\"BANCO\",\"type\":\"string\"},{\"name\":\"REF_SIST_ORIG\",\"type\":\"string\"},{\"name\":\"IBAN_ORDEN\",\"type\":\"string\"},{\"name\":\"NOME_ORDEN\",\"type\":\"string\"},{\"name\":\"IBAN_DEST\",\"type\":\"string\"},{\"name\":\"NOME_DEST\",\"type\":\"string\"},{\"name\":\"ENTIDADE\",\"type\":\"int\"},{\"name\":\"REFERENCIA\",\"type\":\"int\"},{\"name\":\"REF_PAG_ESTADO\",\"type\":\"int\"},{\"name\":\"USER_INS\",\"type\":\"string\"},{\"name\":\"TIMESTAMP_INS\",\"type\":\"string\"},{\"name\":\"USER_ALT\",\"type\":\"string\"},{\"name\":\"TIMESTAMP_ALT\",\"type\":\"string\"},{\"name\":\"LOG_ACCAO\",\"type\":\"string\"},{\"name\":\"ODS_PSTG_DT\",\"type\":\"int\"},{\"name\":\"ODS_PSTG_SEQ\",\"type\":\"int\"},{\"name\":\"CAM_AU_PSTG_DT\",\"type\":\"int\"},{\"name\":\"CAM_AU_PSTG_SEQ\",\"type\":\"int\"},{\"name\":\"CAM_PSTG_DT\",\"type\":\"int\"},{\"name\":\"CAM_PSTG_SEQ\",\"type\":\"int\"},{\"name\":\"SEQ_ID\",\"type\":\"int\"}]}},{\"name\":\"beforeImage\",\"type\":[\"string\",\"null\"]},{\"name\":\"A_ENTTYP\",\"type\":\"string\"},{\"name\":\"A_CCID\",\"type\":\"string\"},{\"name\":\"A_TIMSTAMP\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Cards> ENCODER =
      new BinaryMessageEncoder<Cards>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Cards> DECODER =
      new BinaryMessageDecoder<Cards>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Cards> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Cards> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Cards> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Cards>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Cards to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Cards from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Cards instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Cards fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private EdpSimulator.Entities.afterImage afterImage;
   private java.lang.CharSequence beforeImage;
   private java.lang.CharSequence A_ENTTYP;
   private java.lang.CharSequence A_CCID;
   private java.lang.CharSequence A_TIMSTAMP;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Cards() {}

  /**
   * All-args constructor.
   * @param afterImage The new value for afterImage
   * @param beforeImage The new value for beforeImage
   * @param A_ENTTYP The new value for A_ENTTYP
   * @param A_CCID The new value for A_CCID
   * @param A_TIMSTAMP The new value for A_TIMSTAMP
   */
  public Cards(EdpSimulator.Entities.afterImage afterImage, java.lang.CharSequence beforeImage, java.lang.CharSequence A_ENTTYP, java.lang.CharSequence A_CCID, java.lang.CharSequence A_TIMSTAMP) {
    this.afterImage = afterImage;
    this.beforeImage = beforeImage;
    this.A_ENTTYP = A_ENTTYP;
    this.A_CCID = A_CCID;
    this.A_TIMSTAMP = A_TIMSTAMP;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return afterImage;
    case 1: return beforeImage;
    case 2: return A_ENTTYP;
    case 3: return A_CCID;
    case 4: return A_TIMSTAMP;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: afterImage = (EdpSimulator.Entities.afterImage)value$; break;
    case 1: beforeImage = (java.lang.CharSequence)value$; break;
    case 2: A_ENTTYP = (java.lang.CharSequence)value$; break;
    case 3: A_CCID = (java.lang.CharSequence)value$; break;
    case 4: A_TIMSTAMP = (java.lang.CharSequence)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'afterImage' field.
   * @return The value of the 'afterImage' field.
   */
  public EdpSimulator.Entities.afterImage getAfterImage() {
    return afterImage;
  }


  /**
   * Sets the value of the 'afterImage' field.
   * @param value the value to set.
   */
  public void setAfterImage(EdpSimulator.Entities.afterImage value) {
    this.afterImage = value;
  }

  /**
   * Gets the value of the 'beforeImage' field.
   * @return The value of the 'beforeImage' field.
   */
  public java.lang.CharSequence getBeforeImage() {
    return beforeImage;
  }


  /**
   * Sets the value of the 'beforeImage' field.
   * @param value the value to set.
   */
  public void setBeforeImage(java.lang.CharSequence value) {
    this.beforeImage = value;
  }

  /**
   * Gets the value of the 'A_ENTTYP' field.
   * @return The value of the 'A_ENTTYP' field.
   */
  public java.lang.CharSequence getAENTTYP() {
    return A_ENTTYP;
  }


  /**
   * Sets the value of the 'A_ENTTYP' field.
   * @param value the value to set.
   */
  public void setAENTTYP(java.lang.CharSequence value) {
    this.A_ENTTYP = value;
  }

  /**
   * Gets the value of the 'A_CCID' field.
   * @return The value of the 'A_CCID' field.
   */
  public java.lang.CharSequence getACCID() {
    return A_CCID;
  }


  /**
   * Sets the value of the 'A_CCID' field.
   * @param value the value to set.
   */
  public void setACCID(java.lang.CharSequence value) {
    this.A_CCID = value;
  }

  /**
   * Gets the value of the 'A_TIMSTAMP' field.
   * @return The value of the 'A_TIMSTAMP' field.
   */
  public java.lang.CharSequence getATIMSTAMP() {
    return A_TIMSTAMP;
  }


  /**
   * Sets the value of the 'A_TIMSTAMP' field.
   * @param value the value to set.
   */
  public void setATIMSTAMP(java.lang.CharSequence value) {
    this.A_TIMSTAMP = value;
  }

  /**
   * Creates a new Cards RecordBuilder.
   * @return A new Cards RecordBuilder
   */
  public static EdpSimulator.Entities.Cards.Builder newBuilder() {
    return new EdpSimulator.Entities.Cards.Builder();
  }

  /**
   * Creates a new Cards RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Cards RecordBuilder
   */
  public static EdpSimulator.Entities.Cards.Builder newBuilder(EdpSimulator.Entities.Cards.Builder other) {
    if (other == null) {
      return new EdpSimulator.Entities.Cards.Builder();
    } else {
      return new EdpSimulator.Entities.Cards.Builder(other);
    }
  }

  /**
   * Creates a new Cards RecordBuilder by copying an existing Cards instance.
   * @param other The existing instance to copy.
   * @return A new Cards RecordBuilder
   */
  public static EdpSimulator.Entities.Cards.Builder newBuilder(EdpSimulator.Entities.Cards other) {
    if (other == null) {
      return new EdpSimulator.Entities.Cards.Builder();
    } else {
      return new EdpSimulator.Entities.Cards.Builder(other);
    }
  }

  /**
   * RecordBuilder for Cards instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Cards>
    implements org.apache.avro.data.RecordBuilder<Cards> {

    private EdpSimulator.Entities.afterImage afterImage;
    private EdpSimulator.Entities.afterImage.Builder afterImageBuilder;
    private java.lang.CharSequence beforeImage;
    private java.lang.CharSequence A_ENTTYP;
    private java.lang.CharSequence A_CCID;
    private java.lang.CharSequence A_TIMSTAMP;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(EdpSimulator.Entities.Cards.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.afterImage)) {
        this.afterImage = data().deepCopy(fields()[0].schema(), other.afterImage);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (other.hasAfterImageBuilder()) {
        this.afterImageBuilder = EdpSimulator.Entities.afterImage.newBuilder(other.getAfterImageBuilder());
      }
      if (isValidValue(fields()[1], other.beforeImage)) {
        this.beforeImage = data().deepCopy(fields()[1].schema(), other.beforeImage);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.A_ENTTYP)) {
        this.A_ENTTYP = data().deepCopy(fields()[2].schema(), other.A_ENTTYP);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.A_CCID)) {
        this.A_CCID = data().deepCopy(fields()[3].schema(), other.A_CCID);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.A_TIMSTAMP)) {
        this.A_TIMSTAMP = data().deepCopy(fields()[4].schema(), other.A_TIMSTAMP);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
    }

    /**
     * Creates a Builder by copying an existing Cards instance
     * @param other The existing instance to copy.
     */
    private Builder(EdpSimulator.Entities.Cards other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.afterImage)) {
        this.afterImage = data().deepCopy(fields()[0].schema(), other.afterImage);
        fieldSetFlags()[0] = true;
      }
      this.afterImageBuilder = null;
      if (isValidValue(fields()[1], other.beforeImage)) {
        this.beforeImage = data().deepCopy(fields()[1].schema(), other.beforeImage);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.A_ENTTYP)) {
        this.A_ENTTYP = data().deepCopy(fields()[2].schema(), other.A_ENTTYP);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.A_CCID)) {
        this.A_CCID = data().deepCopy(fields()[3].schema(), other.A_CCID);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.A_TIMSTAMP)) {
        this.A_TIMSTAMP = data().deepCopy(fields()[4].schema(), other.A_TIMSTAMP);
        fieldSetFlags()[4] = true;
      }
    }

    /**
      * Gets the value of the 'afterImage' field.
      * @return The value.
      */
    public EdpSimulator.Entities.afterImage getAfterImage() {
      return afterImage;
    }


    /**
      * Sets the value of the 'afterImage' field.
      * @param value The value of 'afterImage'.
      * @return This builder.
      */
    public EdpSimulator.Entities.Cards.Builder setAfterImage(EdpSimulator.Entities.afterImage value) {
      validate(fields()[0], value);
      this.afterImageBuilder = null;
      this.afterImage = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'afterImage' field has been set.
      * @return True if the 'afterImage' field has been set, false otherwise.
      */
    public boolean hasAfterImage() {
      return fieldSetFlags()[0];
    }

    /**
     * Gets the Builder instance for the 'afterImage' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public EdpSimulator.Entities.afterImage.Builder getAfterImageBuilder() {
      if (afterImageBuilder == null) {
        if (hasAfterImage()) {
          setAfterImageBuilder(EdpSimulator.Entities.afterImage.newBuilder(afterImage));
        } else {
          setAfterImageBuilder(EdpSimulator.Entities.afterImage.newBuilder());
        }
      }
      return afterImageBuilder;
    }

    /**
     * Sets the Builder instance for the 'afterImage' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public EdpSimulator.Entities.Cards.Builder setAfterImageBuilder(EdpSimulator.Entities.afterImage.Builder value) {
      clearAfterImage();
      afterImageBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'afterImage' field has an active Builder instance
     * @return True if the 'afterImage' field has an active Builder instance
     */
    public boolean hasAfterImageBuilder() {
      return afterImageBuilder != null;
    }

    /**
      * Clears the value of the 'afterImage' field.
      * @return This builder.
      */
    public EdpSimulator.Entities.Cards.Builder clearAfterImage() {
      afterImage = null;
      afterImageBuilder = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'beforeImage' field.
      * @return The value.
      */
    public java.lang.CharSequence getBeforeImage() {
      return beforeImage;
    }


    /**
      * Sets the value of the 'beforeImage' field.
      * @param value The value of 'beforeImage'.
      * @return This builder.
      */
    public EdpSimulator.Entities.Cards.Builder setBeforeImage(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.beforeImage = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'beforeImage' field has been set.
      * @return True if the 'beforeImage' field has been set, false otherwise.
      */
    public boolean hasBeforeImage() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'beforeImage' field.
      * @return This builder.
      */
    public EdpSimulator.Entities.Cards.Builder clearBeforeImage() {
      beforeImage = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'A_ENTTYP' field.
      * @return The value.
      */
    public java.lang.CharSequence getAENTTYP() {
      return A_ENTTYP;
    }


    /**
      * Sets the value of the 'A_ENTTYP' field.
      * @param value The value of 'A_ENTTYP'.
      * @return This builder.
      */
    public EdpSimulator.Entities.Cards.Builder setAENTTYP(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.A_ENTTYP = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'A_ENTTYP' field has been set.
      * @return True if the 'A_ENTTYP' field has been set, false otherwise.
      */
    public boolean hasAENTTYP() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'A_ENTTYP' field.
      * @return This builder.
      */
    public EdpSimulator.Entities.Cards.Builder clearAENTTYP() {
      A_ENTTYP = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'A_CCID' field.
      * @return The value.
      */
    public java.lang.CharSequence getACCID() {
      return A_CCID;
    }


    /**
      * Sets the value of the 'A_CCID' field.
      * @param value The value of 'A_CCID'.
      * @return This builder.
      */
    public EdpSimulator.Entities.Cards.Builder setACCID(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.A_CCID = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'A_CCID' field has been set.
      * @return True if the 'A_CCID' field has been set, false otherwise.
      */
    public boolean hasACCID() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'A_CCID' field.
      * @return This builder.
      */
    public EdpSimulator.Entities.Cards.Builder clearACCID() {
      A_CCID = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'A_TIMSTAMP' field.
      * @return The value.
      */
    public java.lang.CharSequence getATIMSTAMP() {
      return A_TIMSTAMP;
    }


    /**
      * Sets the value of the 'A_TIMSTAMP' field.
      * @param value The value of 'A_TIMSTAMP'.
      * @return This builder.
      */
    public EdpSimulator.Entities.Cards.Builder setATIMSTAMP(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.A_TIMSTAMP = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'A_TIMSTAMP' field has been set.
      * @return True if the 'A_TIMSTAMP' field has been set, false otherwise.
      */
    public boolean hasATIMSTAMP() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'A_TIMSTAMP' field.
      * @return This builder.
      */
    public EdpSimulator.Entities.Cards.Builder clearATIMSTAMP() {
      A_TIMSTAMP = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Cards build() {
      try {
        Cards record = new Cards();
        if (afterImageBuilder != null) {
          try {
            record.afterImage = this.afterImageBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("afterImage"));
            throw e;
          }
        } else {
          record.afterImage = fieldSetFlags()[0] ? this.afterImage : (EdpSimulator.Entities.afterImage) defaultValue(fields()[0]);
        }
        record.beforeImage = fieldSetFlags()[1] ? this.beforeImage : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.A_ENTTYP = fieldSetFlags()[2] ? this.A_ENTTYP : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.A_CCID = fieldSetFlags()[3] ? this.A_CCID : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.A_TIMSTAMP = fieldSetFlags()[4] ? this.A_TIMSTAMP : (java.lang.CharSequence) defaultValue(fields()[4]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Cards>
    WRITER$ = (org.apache.avro.io.DatumWriter<Cards>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Cards>
    READER$ = (org.apache.avro.io.DatumReader<Cards>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    this.afterImage.customEncode(out);

    if (this.beforeImage == null) {
      out.writeIndex(1);
      out.writeNull();
    } else {
      out.writeIndex(0);
      out.writeString(this.beforeImage);
    }

    out.writeString(this.A_ENTTYP);

    out.writeString(this.A_CCID);

    out.writeString(this.A_TIMSTAMP);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      if (this.afterImage == null) {
        this.afterImage = new EdpSimulator.Entities.afterImage();
      }
      this.afterImage.customDecode(in);

      if (in.readIndex() != 0) {
        in.readNull();
        this.beforeImage = null;
      } else {
        this.beforeImage = in.readString(this.beforeImage instanceof Utf8 ? (Utf8)this.beforeImage : null);
      }

      this.A_ENTTYP = in.readString(this.A_ENTTYP instanceof Utf8 ? (Utf8)this.A_ENTTYP : null);

      this.A_CCID = in.readString(this.A_CCID instanceof Utf8 ? (Utf8)this.A_CCID : null);

      this.A_TIMSTAMP = in.readString(this.A_TIMSTAMP instanceof Utf8 ? (Utf8)this.A_TIMSTAMP : null);

    } else {
      for (int i = 0; i < 5; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          if (this.afterImage == null) {
            this.afterImage = new EdpSimulator.Entities.afterImage();
          }
          this.afterImage.customDecode(in);
          break;

        case 1:
          if (in.readIndex() != 0) {
            in.readNull();
            this.beforeImage = null;
          } else {
            this.beforeImage = in.readString(this.beforeImage instanceof Utf8 ? (Utf8)this.beforeImage : null);
          }
          break;

        case 2:
          this.A_ENTTYP = in.readString(this.A_ENTTYP instanceof Utf8 ? (Utf8)this.A_ENTTYP : null);
          break;

        case 3:
          this.A_CCID = in.readString(this.A_CCID instanceof Utf8 ? (Utf8)this.A_CCID : null);
          break;

        case 4:
          this.A_TIMSTAMP = in.readString(this.A_TIMSTAMP instanceof Utf8 ? (Utf8)this.A_TIMSTAMP : null);
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










