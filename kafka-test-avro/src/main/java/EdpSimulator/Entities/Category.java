/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package EdpSimulator.Entities;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class Category extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -7504979467953933535L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Category\",\"namespace\":\"EdpSimulator.Entities\",\"fields\":[{\"name\":\"transactionid\",\"type\":\"string\"},{\"name\":\"accountid\",\"type\":\"string\"},{\"name\":\"category\",\"type\":\"int\"},{\"name\":\"subcategory\",\"type\":\"int\"},{\"name\":\"sourceengine\",\"type\":\"string\"},{\"name\":\"engineversion\",\"type\":\"string\"},{\"name\":\"modelversion\",\"type\":\"string\"},{\"name\":\"predictionconfidence\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Category> ENCODER =
      new BinaryMessageEncoder<Category>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Category> DECODER =
      new BinaryMessageDecoder<Category>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Category> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Category> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Category> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Category>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Category to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Category from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Category instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Category fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private java.lang.CharSequence transactionid;
   private java.lang.CharSequence accountid;
   private int category;
   private int subcategory;
   private java.lang.CharSequence sourceengine;
   private java.lang.CharSequence engineversion;
   private java.lang.CharSequence modelversion;
   private java.lang.CharSequence predictionconfidence;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Category() {}

  /**
   * All-args constructor.
   * @param transactionid The new value for transactionid
   * @param accountid The new value for accountid
   * @param category The new value for category
   * @param subcategory The new value for subcategory
   * @param sourceengine The new value for sourceengine
   * @param engineversion The new value for engineversion
   * @param modelversion The new value for modelversion
   * @param predictionconfidence The new value for predictionconfidence
   */
  public Category(java.lang.CharSequence transactionid, java.lang.CharSequence accountid, java.lang.Integer category, java.lang.Integer subcategory, java.lang.CharSequence sourceengine, java.lang.CharSequence engineversion, java.lang.CharSequence modelversion, java.lang.CharSequence predictionconfidence) {
    this.transactionid = transactionid;
    this.accountid = accountid;
    this.category = category;
    this.subcategory = subcategory;
    this.sourceengine = sourceengine;
    this.engineversion = engineversion;
    this.modelversion = modelversion;
    this.predictionconfidence = predictionconfidence;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return transactionid;
    case 1: return accountid;
    case 2: return category;
    case 3: return subcategory;
    case 4: return sourceengine;
    case 5: return engineversion;
    case 6: return modelversion;
    case 7: return predictionconfidence;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: transactionid = (java.lang.CharSequence)value$; break;
    case 1: accountid = (java.lang.CharSequence)value$; break;
    case 2: category = (java.lang.Integer)value$; break;
    case 3: subcategory = (java.lang.Integer)value$; break;
    case 4: sourceengine = (java.lang.CharSequence)value$; break;
    case 5: engineversion = (java.lang.CharSequence)value$; break;
    case 6: modelversion = (java.lang.CharSequence)value$; break;
    case 7: predictionconfidence = (java.lang.CharSequence)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'transactionid' field.
   * @return The value of the 'transactionid' field.
   */
  public java.lang.CharSequence getTransactionid() {
    return transactionid;
  }


  /**
   * Sets the value of the 'transactionid' field.
   * @param value the value to set.
   */
  public void setTransactionid(java.lang.CharSequence value) {
    this.transactionid = value;
  }

  /**
   * Gets the value of the 'accountid' field.
   * @return The value of the 'accountid' field.
   */
  public java.lang.CharSequence getAccountid() {
    return accountid;
  }


  /**
   * Sets the value of the 'accountid' field.
   * @param value the value to set.
   */
  public void setAccountid(java.lang.CharSequence value) {
    this.accountid = value;
  }

  /**
   * Gets the value of the 'category' field.
   * @return The value of the 'category' field.
   */
  public int getCategory() {
    return category;
  }


  /**
   * Sets the value of the 'category' field.
   * @param value the value to set.
   */
  public void setCategory(int value) {
    this.category = value;
  }

  /**
   * Gets the value of the 'subcategory' field.
   * @return The value of the 'subcategory' field.
   */
  public int getSubcategory() {
    return subcategory;
  }


  /**
   * Sets the value of the 'subcategory' field.
   * @param value the value to set.
   */
  public void setSubcategory(int value) {
    this.subcategory = value;
  }

  /**
   * Gets the value of the 'sourceengine' field.
   * @return The value of the 'sourceengine' field.
   */
  public java.lang.CharSequence getSourceengine() {
    return sourceengine;
  }


  /**
   * Sets the value of the 'sourceengine' field.
   * @param value the value to set.
   */
  public void setSourceengine(java.lang.CharSequence value) {
    this.sourceengine = value;
  }

  /**
   * Gets the value of the 'engineversion' field.
   * @return The value of the 'engineversion' field.
   */
  public java.lang.CharSequence getEngineversion() {
    return engineversion;
  }


  /**
   * Sets the value of the 'engineversion' field.
   * @param value the value to set.
   */
  public void setEngineversion(java.lang.CharSequence value) {
    this.engineversion = value;
  }

  /**
   * Gets the value of the 'modelversion' field.
   * @return The value of the 'modelversion' field.
   */
  public java.lang.CharSequence getModelversion() {
    return modelversion;
  }


  /**
   * Sets the value of the 'modelversion' field.
   * @param value the value to set.
   */
  public void setModelversion(java.lang.CharSequence value) {
    this.modelversion = value;
  }

  /**
   * Gets the value of the 'predictionconfidence' field.
   * @return The value of the 'predictionconfidence' field.
   */
  public java.lang.CharSequence getPredictionconfidence() {
    return predictionconfidence;
  }


  /**
   * Sets the value of the 'predictionconfidence' field.
   * @param value the value to set.
   */
  public void setPredictionconfidence(java.lang.CharSequence value) {
    this.predictionconfidence = value;
  }

  /**
   * Creates a new Category RecordBuilder.
   * @return A new Category RecordBuilder
   */
  public static EdpSimulator.Entities.Category.Builder newBuilder() {
    return new EdpSimulator.Entities.Category.Builder();
  }

  /**
   * Creates a new Category RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Category RecordBuilder
   */
  public static EdpSimulator.Entities.Category.Builder newBuilder(EdpSimulator.Entities.Category.Builder other) {
    if (other == null) {
      return new EdpSimulator.Entities.Category.Builder();
    } else {
      return new EdpSimulator.Entities.Category.Builder(other);
    }
  }

  /**
   * Creates a new Category RecordBuilder by copying an existing Category instance.
   * @param other The existing instance to copy.
   * @return A new Category RecordBuilder
   */
  public static EdpSimulator.Entities.Category.Builder newBuilder(EdpSimulator.Entities.Category other) {
    if (other == null) {
      return new EdpSimulator.Entities.Category.Builder();
    } else {
      return new EdpSimulator.Entities.Category.Builder(other);
    }
  }

  /**
   * RecordBuilder for Category instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Category>
    implements org.apache.avro.data.RecordBuilder<Category> {

    private java.lang.CharSequence transactionid;
    private java.lang.CharSequence accountid;
    private int category;
    private int subcategory;
    private java.lang.CharSequence sourceengine;
    private java.lang.CharSequence engineversion;
    private java.lang.CharSequence modelversion;
    private java.lang.CharSequence predictionconfidence;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(EdpSimulator.Entities.Category.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.transactionid)) {
        this.transactionid = data().deepCopy(fields()[0].schema(), other.transactionid);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.accountid)) {
        this.accountid = data().deepCopy(fields()[1].schema(), other.accountid);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.category)) {
        this.category = data().deepCopy(fields()[2].schema(), other.category);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.subcategory)) {
        this.subcategory = data().deepCopy(fields()[3].schema(), other.subcategory);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.sourceengine)) {
        this.sourceengine = data().deepCopy(fields()[4].schema(), other.sourceengine);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.engineversion)) {
        this.engineversion = data().deepCopy(fields()[5].schema(), other.engineversion);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.modelversion)) {
        this.modelversion = data().deepCopy(fields()[6].schema(), other.modelversion);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.predictionconfidence)) {
        this.predictionconfidence = data().deepCopy(fields()[7].schema(), other.predictionconfidence);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
    }

    /**
     * Creates a Builder by copying an existing Category instance
     * @param other The existing instance to copy.
     */
    private Builder(EdpSimulator.Entities.Category other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.transactionid)) {
        this.transactionid = data().deepCopy(fields()[0].schema(), other.transactionid);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.accountid)) {
        this.accountid = data().deepCopy(fields()[1].schema(), other.accountid);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.category)) {
        this.category = data().deepCopy(fields()[2].schema(), other.category);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.subcategory)) {
        this.subcategory = data().deepCopy(fields()[3].schema(), other.subcategory);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.sourceengine)) {
        this.sourceengine = data().deepCopy(fields()[4].schema(), other.sourceengine);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.engineversion)) {
        this.engineversion = data().deepCopy(fields()[5].schema(), other.engineversion);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.modelversion)) {
        this.modelversion = data().deepCopy(fields()[6].schema(), other.modelversion);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.predictionconfidence)) {
        this.predictionconfidence = data().deepCopy(fields()[7].schema(), other.predictionconfidence);
        fieldSetFlags()[7] = true;
      }
    }

    /**
      * Gets the value of the 'transactionid' field.
      * @return The value.
      */
    public java.lang.CharSequence getTransactionid() {
      return transactionid;
    }


    /**
      * Sets the value of the 'transactionid' field.
      * @param value The value of 'transactionid'.
      * @return This builder.
      */
    public EdpSimulator.Entities.Category.Builder setTransactionid(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.transactionid = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'transactionid' field has been set.
      * @return True if the 'transactionid' field has been set, false otherwise.
      */
    public boolean hasTransactionid() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'transactionid' field.
      * @return This builder.
      */
    public EdpSimulator.Entities.Category.Builder clearTransactionid() {
      transactionid = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'accountid' field.
      * @return The value.
      */
    public java.lang.CharSequence getAccountid() {
      return accountid;
    }


    /**
      * Sets the value of the 'accountid' field.
      * @param value The value of 'accountid'.
      * @return This builder.
      */
    public EdpSimulator.Entities.Category.Builder setAccountid(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.accountid = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'accountid' field has been set.
      * @return True if the 'accountid' field has been set, false otherwise.
      */
    public boolean hasAccountid() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'accountid' field.
      * @return This builder.
      */
    public EdpSimulator.Entities.Category.Builder clearAccountid() {
      accountid = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'category' field.
      * @return The value.
      */
    public int getCategory() {
      return category;
    }


    /**
      * Sets the value of the 'category' field.
      * @param value The value of 'category'.
      * @return This builder.
      */
    public EdpSimulator.Entities.Category.Builder setCategory(int value) {
      validate(fields()[2], value);
      this.category = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'category' field has been set.
      * @return True if the 'category' field has been set, false otherwise.
      */
    public boolean hasCategory() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'category' field.
      * @return This builder.
      */
    public EdpSimulator.Entities.Category.Builder clearCategory() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'subcategory' field.
      * @return The value.
      */
    public int getSubcategory() {
      return subcategory;
    }


    /**
      * Sets the value of the 'subcategory' field.
      * @param value The value of 'subcategory'.
      * @return This builder.
      */
    public EdpSimulator.Entities.Category.Builder setSubcategory(int value) {
      validate(fields()[3], value);
      this.subcategory = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'subcategory' field has been set.
      * @return True if the 'subcategory' field has been set, false otherwise.
      */
    public boolean hasSubcategory() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'subcategory' field.
      * @return This builder.
      */
    public EdpSimulator.Entities.Category.Builder clearSubcategory() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'sourceengine' field.
      * @return The value.
      */
    public java.lang.CharSequence getSourceengine() {
      return sourceengine;
    }


    /**
      * Sets the value of the 'sourceengine' field.
      * @param value The value of 'sourceengine'.
      * @return This builder.
      */
    public EdpSimulator.Entities.Category.Builder setSourceengine(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.sourceengine = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'sourceengine' field has been set.
      * @return True if the 'sourceengine' field has been set, false otherwise.
      */
    public boolean hasSourceengine() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'sourceengine' field.
      * @return This builder.
      */
    public EdpSimulator.Entities.Category.Builder clearSourceengine() {
      sourceengine = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'engineversion' field.
      * @return The value.
      */
    public java.lang.CharSequence getEngineversion() {
      return engineversion;
    }


    /**
      * Sets the value of the 'engineversion' field.
      * @param value The value of 'engineversion'.
      * @return This builder.
      */
    public EdpSimulator.Entities.Category.Builder setEngineversion(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.engineversion = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'engineversion' field has been set.
      * @return True if the 'engineversion' field has been set, false otherwise.
      */
    public boolean hasEngineversion() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'engineversion' field.
      * @return This builder.
      */
    public EdpSimulator.Entities.Category.Builder clearEngineversion() {
      engineversion = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'modelversion' field.
      * @return The value.
      */
    public java.lang.CharSequence getModelversion() {
      return modelversion;
    }


    /**
      * Sets the value of the 'modelversion' field.
      * @param value The value of 'modelversion'.
      * @return This builder.
      */
    public EdpSimulator.Entities.Category.Builder setModelversion(java.lang.CharSequence value) {
      validate(fields()[6], value);
      this.modelversion = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'modelversion' field has been set.
      * @return True if the 'modelversion' field has been set, false otherwise.
      */
    public boolean hasModelversion() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'modelversion' field.
      * @return This builder.
      */
    public EdpSimulator.Entities.Category.Builder clearModelversion() {
      modelversion = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'predictionconfidence' field.
      * @return The value.
      */
    public java.lang.CharSequence getPredictionconfidence() {
      return predictionconfidence;
    }


    /**
      * Sets the value of the 'predictionconfidence' field.
      * @param value The value of 'predictionconfidence'.
      * @return This builder.
      */
    public EdpSimulator.Entities.Category.Builder setPredictionconfidence(java.lang.CharSequence value) {
      validate(fields()[7], value);
      this.predictionconfidence = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'predictionconfidence' field has been set.
      * @return True if the 'predictionconfidence' field has been set, false otherwise.
      */
    public boolean hasPredictionconfidence() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'predictionconfidence' field.
      * @return This builder.
      */
    public EdpSimulator.Entities.Category.Builder clearPredictionconfidence() {
      predictionconfidence = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Category build() {
      try {
        Category record = new Category();
        record.transactionid = fieldSetFlags()[0] ? this.transactionid : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.accountid = fieldSetFlags()[1] ? this.accountid : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.category = fieldSetFlags()[2] ? this.category : (java.lang.Integer) defaultValue(fields()[2]);
        record.subcategory = fieldSetFlags()[3] ? this.subcategory : (java.lang.Integer) defaultValue(fields()[3]);
        record.sourceengine = fieldSetFlags()[4] ? this.sourceengine : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.engineversion = fieldSetFlags()[5] ? this.engineversion : (java.lang.CharSequence) defaultValue(fields()[5]);
        record.modelversion = fieldSetFlags()[6] ? this.modelversion : (java.lang.CharSequence) defaultValue(fields()[6]);
        record.predictionconfidence = fieldSetFlags()[7] ? this.predictionconfidence : (java.lang.CharSequence) defaultValue(fields()[7]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Category>
    WRITER$ = (org.apache.avro.io.DatumWriter<Category>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Category>
    READER$ = (org.apache.avro.io.DatumReader<Category>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.transactionid);

    out.writeString(this.accountid);

    out.writeInt(this.category);

    out.writeInt(this.subcategory);

    out.writeString(this.sourceengine);

    out.writeString(this.engineversion);

    out.writeString(this.modelversion);

    out.writeString(this.predictionconfidence);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.transactionid = in.readString(this.transactionid instanceof Utf8 ? (Utf8)this.transactionid : null);

      this.accountid = in.readString(this.accountid instanceof Utf8 ? (Utf8)this.accountid : null);

      this.category = in.readInt();

      this.subcategory = in.readInt();

      this.sourceengine = in.readString(this.sourceengine instanceof Utf8 ? (Utf8)this.sourceengine : null);

      this.engineversion = in.readString(this.engineversion instanceof Utf8 ? (Utf8)this.engineversion : null);

      this.modelversion = in.readString(this.modelversion instanceof Utf8 ? (Utf8)this.modelversion : null);

      this.predictionconfidence = in.readString(this.predictionconfidence instanceof Utf8 ? (Utf8)this.predictionconfidence : null);

    } else {
      for (int i = 0; i < 8; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.transactionid = in.readString(this.transactionid instanceof Utf8 ? (Utf8)this.transactionid : null);
          break;

        case 1:
          this.accountid = in.readString(this.accountid instanceof Utf8 ? (Utf8)this.accountid : null);
          break;

        case 2:
          this.category = in.readInt();
          break;

        case 3:
          this.subcategory = in.readInt();
          break;

        case 4:
          this.sourceengine = in.readString(this.sourceengine instanceof Utf8 ? (Utf8)this.sourceengine : null);
          break;

        case 5:
          this.engineversion = in.readString(this.engineversion instanceof Utf8 ? (Utf8)this.engineversion : null);
          break;

        case 6:
          this.modelversion = in.readString(this.modelversion instanceof Utf8 ? (Utf8)this.modelversion : null);
          break;

        case 7:
          this.predictionconfidence = in.readString(this.predictionconfidence instanceof Utf8 ? (Utf8)this.predictionconfidence : null);
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










