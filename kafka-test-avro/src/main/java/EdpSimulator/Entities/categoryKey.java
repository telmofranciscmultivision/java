/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package EdpSimulator.Entities;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class categoryKey extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 5695072878827492634L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"categoryKey\",\"namespace\":\"EdpSimulator.Entities\",\"fields\":[{\"name\":\"transactionid\",\"type\":\"string\"},{\"name\":\"accountid\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<categoryKey> ENCODER =
      new BinaryMessageEncoder<categoryKey>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<categoryKey> DECODER =
      new BinaryMessageDecoder<categoryKey>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<categoryKey> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<categoryKey> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<categoryKey> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<categoryKey>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this categoryKey to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a categoryKey from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a categoryKey instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static categoryKey fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private java.lang.CharSequence transactionid;
   private java.lang.CharSequence accountid;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public categoryKey() {}

  /**
   * All-args constructor.
   * @param transactionid The new value for transactionid
   * @param accountid The new value for accountid
   */
  public categoryKey(java.lang.CharSequence transactionid, java.lang.CharSequence accountid) {
    this.transactionid = transactionid;
    this.accountid = accountid;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return transactionid;
    case 1: return accountid;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: transactionid = (java.lang.CharSequence)value$; break;
    case 1: accountid = (java.lang.CharSequence)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'transactionid' field.
   * @return The value of the 'transactionid' field.
   */
  public java.lang.CharSequence getTransactionid() {
    return transactionid;
  }


  /**
   * Sets the value of the 'transactionid' field.
   * @param value the value to set.
   */
  public void setTransactionid(java.lang.CharSequence value) {
    this.transactionid = value;
  }

  /**
   * Gets the value of the 'accountid' field.
   * @return The value of the 'accountid' field.
   */
  public java.lang.CharSequence getAccountid() {
    return accountid;
  }


  /**
   * Sets the value of the 'accountid' field.
   * @param value the value to set.
   */
  public void setAccountid(java.lang.CharSequence value) {
    this.accountid = value;
  }

  /**
   * Creates a new categoryKey RecordBuilder.
   * @return A new categoryKey RecordBuilder
   */
  public static EdpSimulator.Entities.categoryKey.Builder newBuilder() {
    return new EdpSimulator.Entities.categoryKey.Builder();
  }

  /**
   * Creates a new categoryKey RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new categoryKey RecordBuilder
   */
  public static EdpSimulator.Entities.categoryKey.Builder newBuilder(EdpSimulator.Entities.categoryKey.Builder other) {
    if (other == null) {
      return new EdpSimulator.Entities.categoryKey.Builder();
    } else {
      return new EdpSimulator.Entities.categoryKey.Builder(other);
    }
  }

  /**
   * Creates a new categoryKey RecordBuilder by copying an existing categoryKey instance.
   * @param other The existing instance to copy.
   * @return A new categoryKey RecordBuilder
   */
  public static EdpSimulator.Entities.categoryKey.Builder newBuilder(EdpSimulator.Entities.categoryKey other) {
    if (other == null) {
      return new EdpSimulator.Entities.categoryKey.Builder();
    } else {
      return new EdpSimulator.Entities.categoryKey.Builder(other);
    }
  }

  /**
   * RecordBuilder for categoryKey instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<categoryKey>
    implements org.apache.avro.data.RecordBuilder<categoryKey> {

    private java.lang.CharSequence transactionid;
    private java.lang.CharSequence accountid;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(EdpSimulator.Entities.categoryKey.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.transactionid)) {
        this.transactionid = data().deepCopy(fields()[0].schema(), other.transactionid);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.accountid)) {
        this.accountid = data().deepCopy(fields()[1].schema(), other.accountid);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
    }

    /**
     * Creates a Builder by copying an existing categoryKey instance
     * @param other The existing instance to copy.
     */
    private Builder(EdpSimulator.Entities.categoryKey other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.transactionid)) {
        this.transactionid = data().deepCopy(fields()[0].schema(), other.transactionid);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.accountid)) {
        this.accountid = data().deepCopy(fields()[1].schema(), other.accountid);
        fieldSetFlags()[1] = true;
      }
    }

    /**
      * Gets the value of the 'transactionid' field.
      * @return The value.
      */
    public java.lang.CharSequence getTransactionid() {
      return transactionid;
    }


    /**
      * Sets the value of the 'transactionid' field.
      * @param value The value of 'transactionid'.
      * @return This builder.
      */
    public EdpSimulator.Entities.categoryKey.Builder setTransactionid(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.transactionid = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'transactionid' field has been set.
      * @return True if the 'transactionid' field has been set, false otherwise.
      */
    public boolean hasTransactionid() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'transactionid' field.
      * @return This builder.
      */
    public EdpSimulator.Entities.categoryKey.Builder clearTransactionid() {
      transactionid = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'accountid' field.
      * @return The value.
      */
    public java.lang.CharSequence getAccountid() {
      return accountid;
    }


    /**
      * Sets the value of the 'accountid' field.
      * @param value The value of 'accountid'.
      * @return This builder.
      */
    public EdpSimulator.Entities.categoryKey.Builder setAccountid(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.accountid = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'accountid' field has been set.
      * @return True if the 'accountid' field has been set, false otherwise.
      */
    public boolean hasAccountid() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'accountid' field.
      * @return This builder.
      */
    public EdpSimulator.Entities.categoryKey.Builder clearAccountid() {
      accountid = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public categoryKey build() {
      try {
        categoryKey record = new categoryKey();
        record.transactionid = fieldSetFlags()[0] ? this.transactionid : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.accountid = fieldSetFlags()[1] ? this.accountid : (java.lang.CharSequence) defaultValue(fields()[1]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<categoryKey>
    WRITER$ = (org.apache.avro.io.DatumWriter<categoryKey>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<categoryKey>
    READER$ = (org.apache.avro.io.DatumReader<categoryKey>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.transactionid);

    out.writeString(this.accountid);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.transactionid = in.readString(this.transactionid instanceof Utf8 ? (Utf8)this.transactionid : null);

      this.accountid = in.readString(this.accountid instanceof Utf8 ? (Utf8)this.accountid : null);

    } else {
      for (int i = 0; i < 2; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.transactionid = in.readString(this.transactionid instanceof Utf8 ? (Utf8)this.transactionid : null);
          break;

        case 1:
          this.accountid = in.readString(this.accountid instanceof Utf8 ? (Utf8)this.accountid : null);
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










